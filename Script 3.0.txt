-- PARA SANDRA.

-- GMAIL
-- USER: screditos.sandra@gmail.com
-- PASSWORD: screditos-sandra2020

-- NOMBRE DB: DB_SCREDITOS


---------------------------------------------------------------------------------
------------------------------ TABLA USUARIOS.-----------------------------------
---------------------------------------------------------------------------------
-- CREAR TABLA USUARIOS.
CREATE TABLE USUARIOS
(
    ID              SERIAL PRIMARY KEY NOT NULL,
    NOMBRE_COMPLETO VARCHAR(100)       NOT NULL,
    USUARIO         VARCHAR(20)        NOT NULL,
    CONTRASENA      VARCHAR(20)        NOT NULL
);

-- INSERTAR USUARIO POR DEFECTO DE SANDRA.
INSERT INTO USUARIOS (NOMBRE_COMPLETO, USUARIO, CONTRASENA)
VALUES ('SANDRA RESTREPO ENCISO', 'SANDRA', '0987654321');



---------------------------------------------------------------------------------
------------------------------- TABLA COBROS.------------------------------------
---------------------------------------------------------------------------------
-- CREAR TABLA COBROS.
CREATE TABLE COBROS
(
    ID     SERIAL PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR(100)       NOT NULL
);

-- CREAR FUNCION PARA CREAR COBROS.
CREATE OR REPLACE FUNCTION CREAR_COBROS(P_NOMBRE_COBRO CHARACTER(100),
                                        CAPITAL INTEGER,
                                        P_FECHA_INICIO DATE) RETURNS VOID
AS
$$
DECLARE
    CEDULA_CLAVO VARCHAR;
	CEDULA_CLAVO_NUMERICO NUMERIC;
BEGIN
    INSERT INTO COBROS (NOMBRE) VALUES (P_NOMBRE_COBRO);

    INSERT INTO CARTERAS (NOMBRE_COBRO, FECHA_INICIO, FECHA_FINAL, TARJETAS, COBRO, PRESTO, UTILIDAD, BASE, EFECTIVO,
                          GASTOS, CARTERA, CAJA)
    VALUES (P_NOMBRE_COBRO, P_FECHA_INICIO, P_FECHA_INICIO, 0, 0, 0, 0, 0, 0, 0, CAPITAL, CAPITAL);

	CEDULA_CLAVO = (SELECT MAX(CEDULA) FROM CLIENTES WHERE NOMBRE= 'CLAVO');

	IF (CEDULA_CLAVO IS NULL) THEN
		INSERT INTO CLIENTES (CEDULA, NOMBRE, DIRECCION, COBRO, TELEFONO, CALIFICACION, RUTA)
		VALUES ('100000', 'CLAVO', 'NINGUNA', P_NOMBRE_COBRO, '1', 'BUENO', 1);

		INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO, FECHA_INICIO, CALIFICACION, TIPO_PRESTAMO)
		VALUES ('100000', 0, 0, 0, 40, 0, 0, 'ACTIVO', P_FECHA_INICIO, 'BUENO', 'CLAVO');
	ELSE
		CEDULA_CLAVO_NUMERICO = CAST(CEDULA_CLAVO AS NUMERIC) + 1;

		INSERT INTO CLIENTES (CEDULA, NOMBRE, DIRECCION, COBRO, TELEFONO, CALIFICACION, RUTA)
		VALUES (CAST(CEDULA_CLAVO_NUMERICO AS VARCHAR), 'CLAVO', 'NINGUNA', P_NOMBRE_COBRO, '1', 'BUENO', 1);

		INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO, FECHA_INICIO, CALIFICACION, TIPO_PRESTAMO)
		VALUES (CAST(CEDULA_CLAVO_NUMERICO AS VARCHAR), 0, 0, 0, 40, 0, 0, 'ACTIVO', P_FECHA_INICIO, 'BUENO', 'CLAVO');
    END IF;
END;
$$ LANGUAGE PLPGSQL;



---------------------------------------------------------------------------------
------------------------------ TABLA CARTERAS.-----------------------------------
---------------------------------------------------------------------------------
CREATE TABLE CARTERAS
(
    ID           SERIAL PRIMARY KEY NOT NULL,
    NOMBRE_COBRO VARCHAR(100)        NOT NULL,
    FECHA_INICIO DATE,
    FECHA_FINAL  DATE,
    TARJETAS     INT                NOT NULL,
    COBRO        INT                NOT NULL,
    PRESTO       INT                NOT NULL,
    UTILIDAD     INT                NOT NULL,
    BASE         INT                NOT NULL,
    EFECTIVO     INT                NOT NULL,
    GASTOS       INT                NOT NULL,
    CARTERA      INT                NOT NULL,
    CAJA         INT                NOT NULL
);



---------------------------------------------------------------------------------
------------------------------ TABLA PRESTAMOS.----------------------------------
---------------------------------------------------------------------------------
CREATE TABLE PRESTAMOS
(
    ID             SERIAL PRIMARY KEY NOT NULL,
    CEDULA_CLIENTE VARCHAR(100)        NOT NULL,
    PRESTAMO       DECIMAL            NOT NULL,
    VALOR          DECIMAL            NOT NULL,
    INTERES        DECIMAL            NOT NULL,
    PLAZO_DIAS     INTEGER            NOT NULL,
    VALOR_DEBE     NUMERIC            NOT NULL,
    VALOR_PAGO     NUMERIC            NOT NULL,
    ESTADO         VARCHAR(10)        NOT NULL,
    FECHA_INICIO   DATE               NOT NULL,
    FECHA_PAGO     DATE,
    CALIFICACION VARCHAR(15),
	TIPO_PRESTAMO VARCHAR(15)
);

-- CREAR FUNCION CREAR NUEVO PRESTAMO
CREATE OR REPLACE FUNCTION CREAR_NUEVO_PRESTAMO(P_CEDULA CHARACTER(100), P_PRESTAMO_PRESTAMO DECIMAL,
                                                P_PRESTAMO_VALOR DECIMAL, P_PRESTAMO_INTERES DECIMAL,
                                                P_PRESTAMO_PLAZO INTEGER, P_FECHA_INICIO DATE,
                                                P_COBRO CHARACTER,
											    P_VALOR_PAGO_DOMINGOS DECIMAL) RETURNS VOID AS
$$
DECLARE
BEGIN
    INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO,
                           FECHA_INICIO, CALIFICACION, TIPO_PRESTAMO)
    VALUES (P_CEDULA, P_PRESTAMO_PRESTAMO, P_PRESTAMO_VALOR, P_PRESTAMO_INTERES, P_PRESTAMO_PLAZO, P_PRESTAMO_VALOR, 0,
            'ACTIVO', P_FECHA_INICIO, 'BUENO', 'NORMAL');

    IF (SELECT EXISTE_CONTABILIDAD(P_COBRO, P_FECHA_INICIO) = 1) THEN
        PERFORM CONTABILIDAD_SUMAR_TARJETA(P_COBRO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_PRESTO(P_COBRO, P_PRESTAMO_PRESTAMO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_UTILIDAD(P_COBRO, P_PRESTAMO_INTERES, P_FECHA_INICIO);
		PERFORM CONTABILIDAD_SUMAR_COBRO(P_COBRO, P_VALOR_PAGO_DOMINGOS, P_FECHA_INICIO);
    ELSE
        PERFORM CREAR_CONTABILIDAD(P_COBRO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_TARJETA(P_COBRO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_PRESTO(P_COBRO, P_PRESTAMO_PRESTAMO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_UTILIDAD(P_COBRO, P_PRESTAMO_INTERES, P_FECHA_INICIO);
		PERFORM CONTABILIDAD_SUMAR_COBRO(P_COBRO, P_VALOR_PAGO_DOMINGOS, P_FECHA_INICIO);
    END IF;
END
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION CANCELAR PRESTAMO
CREATE OR REPLACE FUNCTION CANCELAR_PRESTAMO(P_ID_PRESTAMO INTEGER, P_FECHA DATE, P_COBRO CHARACTER) RETURNS VOID AS
$$
DECLARE
    DEBE NUMERIC;
    PAGO NUMERIC;
BEGIN
    DEBE = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
    PAGO = (SELECT VALOR_PAGO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) + DEBE;

    UPDATE PRESTAMOS
    SET VALOR_DEBE = 0, VALOR_PAGO = PAGO, ESTADO = 'PAGÃ“', FECHA_PAGO = P_FECHA
    WHERE ID = P_ID_PRESTAMO;

    INSERT INTO ABONOS (ID_PRESTAMO, FECHA_INICIO, VALOR, VALOR_RESTANTE, TIPO_ABONO) VALUES (P_ID_PRESTAMO, P_FECHA, DEBE, 0, 'ABONO');

    IF (SELECT EXISTE_CONTABILIDAD(P_COBRO, P_FECHA) = 1) THEN
        PERFORM CONTABILIDAD_SUMAR_COBRO(P_COBRO, DEBE, P_FECHA);
        PERFORM CONTABILIDAD_RESTAR_TARJETA(P_COBRO, P_FECHA);
    ELSE
        PERFORM CREAR_CONTABILIDAD(P_COBRO, P_FECHA);
        PERFORM CONTABILIDAD_SUMAR_COBRO(P_COBRO, DEBE, P_FECHA);
        PERFORM CONTABILIDAD_RESTAR_TARJETA(P_COBRO, P_FECHA);
    END IF;
END
$$ LANGUAGE PLPGSQL;



---------------------------------------------------------------------------------
------------------------------ TABLA CONTABILIDADES.-----------------------------
---------------------------------------------------------------------------------
CREATE TABLE CONTABILIDADES
(
    ID           SERIAL PRIMARY KEY NOT NULL,
    NOMBRE_COBRO VARCHAR            NOT NULL,
    FECHA        DATE               NOT NULL,
    TARJETAS     INTEGER            NOT NULL,
    COBRO        NUMERIC            NOT NULL,
    PRESTO       NUMERIC            NOT NULL,
    UTILIDAD     NUMERIC            NOT NULL,
    GASTOS       NUMERIC            NOT NULL,
    OTROS_GASTOS NUMERIC            NOT NULL,
    ESTADO       VARCHAR            NOT NULL -- SAVE, NOT SAVE
);

-- CREAR FUNCION PARA CREAR CONTABILIDAD.
CREATE OR REPLACE FUNCTION EXISTE_CONTABILIDAD(P_COBRO CHARACTER,
                                               P_FECHA DATE)
    RETURNS INTEGER
AS
$$
DECLARE
BEGIN
    IF ((SELECT 1 FROM CONTABILIDADES WHERE NOMBRE_COBRO = P_COBRO AND FECHA = P_FECHA) = 1) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PARA CREAR CONTABILIDAD.
CREATE OR REPLACE FUNCTION CREAR_CONTABILIDAD(P_COBRO CHARACTER,
                                              P_FECHA DATE) RETURNS VOID
AS
$$
DECLARE
BEGIN
    INSERT INTO CONTABILIDADES (NOMBRE_COBRO, FECHA, TARJETAS, COBRO, PRESTO, UTILIDAD, GASTOS, OTROS_GASTOS, ESTADO)
    VALUES (P_COBRO, P_FECHA, 0, 0, 0, 0, 0, 0, 'NOT SAVE');

    --PERFORM CONTABILIDAD_SUMAR_GASTOS(P_COBRO, P_FECHA);
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PARA SUMAR TARJETAS.
CREATE OR REPLACE FUNCTION CONTABILIDAD_SUMAR_TARJETA(P_COBRO CHARACTER,
                                                      P_FECHA DATE) RETURNS VOID
AS
$$
DECLARE
BEGIN
    UPDATE CONTABILIDADES
    SET TARJETAS = (
            (SELECT TARJETAS
             FROM CONTABILIDADES
             WHERE FECHA = P_FECHA
               AND NOMBRE_COBRO = P_COBRO)
            + 1)
    WHERE FECHA = P_FECHA
      AND NOMBRE_COBRO = P_COBRO;
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PARA SUMAR TARJETAS.
CREATE OR REPLACE FUNCTION CONTABILIDAD_RESTAR_TARJETA(P_COBRO CHARACTER,
                                                      P_FECHA DATE) RETURNS VOID
AS
$$
DECLARE
BEGIN
    UPDATE CONTABILIDADES
    SET TARJETAS = (
            (SELECT TARJETAS
             FROM CONTABILIDADES
             WHERE FECHA = P_FECHA
               AND NOMBRE_COBRO = P_COBRO)
            - 1)
    WHERE FECHA = P_FECHA
      AND NOMBRE_COBRO = P_COBRO;
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PARA SUMAR VALOR COBRO.
CREATE OR REPLACE FUNCTION CONTABILIDAD_SUMAR_COBRO(P_COBRO CHARACTER,
                                                    P_VALOR DECIMAL,
                                                    P_FECHA DATE) RETURNS VOID
AS
$$
DECLARE
BEGIN
    UPDATE CONTABILIDADES
    SET COBRO = (
            (SELECT COBRO
             FROM CONTABILIDADES
             WHERE FECHA = P_FECHA
               AND NOMBRE_COBRO = P_COBRO)
            + P_VALOR)
    WHERE FECHA = P_FECHA
      AND NOMBRE_COBRO = P_COBRO;
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PARA SUMAR VALOR PRESTO.
CREATE OR REPLACE FUNCTION CONTABILIDAD_SUMAR_PRESTO(P_COBRO CHARACTER,
                                                     P_VALOR DECIMAL,
                                                     P_FECHA DATE) RETURNS VOID
AS
$$
DECLARE
BEGIN
    UPDATE CONTABILIDADES
    SET PRESTO = (
            (SELECT PRESTO
             FROM CONTABILIDADES
             WHERE FECHA = P_FECHA
               AND NOMBRE_COBRO = P_COBRO)
            + P_VALOR)
    WHERE FECHA = P_FECHA
      AND NOMBRE_COBRO = P_COBRO;
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PARA SUMAR VALOR UTILIDAD.
CREATE OR REPLACE FUNCTION CONTABILIDAD_SUMAR_UTILIDAD(P_COBRO CHARACTER,
                                                       P_VALOR DECIMAL,
                                                       P_FECHA DATE) RETURNS VOID
AS
$$
DECLARE
BEGIN
    UPDATE CONTABILIDADES
    SET UTILIDAD = (
            (SELECT UTILIDAD
             FROM CONTABILIDADES
             WHERE FECHA = P_FECHA
               AND NOMBRE_COBRO = P_COBRO)
            + P_VALOR)
    WHERE FECHA = P_FECHA
      AND NOMBRE_COBRO = P_COBRO;
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PARA SUMAR VALOR OTROS_GASTOS.
CREATE OR REPLACE FUNCTION CONTABILIDAD_SUMAR_OTROS_GASTOS(P_ID_CONTABILIDAD INTEGER,
                                                           P_VALOR DECIMAL) RETURNS VOID
AS
$$
DECLARE
BEGIN
    UPDATE CONTABILIDADES
    SET OTROS_GASTOS = (
            (SELECT OTROS_GASTOS
             FROM CONTABILIDADES
             WHERE ID = P_ID_CONTABILIDAD)
            + P_VALOR)
    WHERE ID = P_ID_CONTABILIDAD;
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PARA SUMAR VALOR GASTOS.
CREATE OR REPLACE FUNCTION CONTABILIDAD_SUMAR_GASTOS(P_COBRO CHARACTER, P_FECHA DATE) RETURNS VOID
AS
$$
DECLARE
    GASTOS_DIARIOS DECIMAL = 0;
BEGIN
    IF (SELECT 1 FROM GASTOS WHERE NOMBRE_COBRO = P_COBRO AND FECHA <= P_FECHA) = 1 THEN
        GASTOS_DIARIOS = (SELECT SUM(VALOR) FROM GASTOS WHERE NOMBRE_COBRO = P_COBRO AND FECHA <= P_FECHA);
    END IF;

    UPDATE CONTABILIDADES
    SET GASTOS = GASTOS_DIARIOS
    WHERE FECHA = P_FECHA
      AND NOMBRE_COBRO = P_COBRO;
END;
$$ LANGUAGE PLPGSQL;



---------------------------------------------------------------------------------
------------------------------ TABLA GASTOS.-------------------------------------
---------------------------------------------------------------------------------
CREATE TABLE GASTOS
(
    ID           SERIAL PRIMARY KEY NOT NULL,
    NOMBRE_COBRO VARCHAR            NOT NULL,
    NOMBRE_GASTO VARCHAR            NOT NULL,
    DESCRIPCION  VARCHAR            NULL,
    FECHA        DATE               NOT NULL,
    VALOR        DECIMAL            NOT NULL
);

CREATE OR REPLACE FUNCTION CREAR_GASTO(P_NOMBRE_COBRO CHARACTER(100),
                                       P_NOMBRE_GASTO CHARACTER(100),
                                       P_DESCRIPCION CHARACTER(255),
                                       P_FECHA DATE,
                                       P_VALOR DECIMAL) RETURNS VOID
AS
$$
DECLARE
BEGIN
    INSERT INTO GASTOS (NOMBRE_COBRO, NOMBRE_GASTO, DESCRIPCION, FECHA, VALOR)
    VALUES (P_NOMBRE_COBRO, P_NOMBRE_GASTO, P_DESCRIPCION, P_FECHA, P_VALOR);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ELIMINAR_GASTO(
    P_ID INTEGER
) RETURNS VOID
AS
$$
DECLARE
BEGIN
    DELETE
    FROM GASTOS
    WHERE ID = P_ID;
END;
$$ LANGUAGE PLPGSQL;



---------------------------------------------------------------------------------
----------------------------- TABLA OTROS_GASTOS.--------------------------------
---------------------------------------------------------------------------------
CREATE TABLE OTROS_GASTOS
(
    ID              SERIAL PRIMARY KEY NOT NULL,
    ID_CONTABILIDAD INTEGER            NOT NULL,
    NOMBRE_COBRO    VARCHAR            NOT NULL,
    DESCRIPCION     VARCHAR            NOT NULL,
    FECHA           DATE               NOT NULL,
    VALOR           DECIMAL            NOT NULL
);

-- CREAR FUNCION PARA CREAR OTRO GRASTO NUEVO.
CREATE OR REPLACE FUNCTION CREAR_OTRO_GASTO(P_ID_CONTABILIDAD INTEGER,
                                            P_NOMBRE_COBRO CHARACTER(100),
                                            P_DESCRIPCION CHARACTER(255),
                                            P_FECHA DATE,
                                            P_VALOR DECIMAL) RETURNS VOID
AS
$$
DECLARE
BEGIN
    INSERT INTO OTROS_GASTOS (ID_CONTABILIDAD, NOMBRE_COBRO, DESCRIPCION, FECHA, VALOR)
    VALUES (P_ID_CONTABILIDAD, P_NOMBRE_COBRO, P_DESCRIPCION, P_FECHA, P_VALOR);

    PERFORM CONTABILIDAD_SUMAR_OTROS_GASTOS(
                   P_ID_CONTABILIDAD,
                   P_VALOR);
END;
$$ LANGUAGE PLPGSQL;



---------------------------------------------------------------------------------
----------------------------- TABLA CLIENTES.------------------------------------
---------------------------------------------------------------------------------
CREATE TABLE CLIENTES
(
    ID           SERIAL PRIMARY KEY NOT NULL,
    CEDULA       VARCHAR(100) UNIQUE NOT NULL,
    NOMBRE       VARCHAR(100)       NOT NULL,
    DIRECCION    VARCHAR(100)       NOT NULL,
    COBRO        VARCHAR(100)       NOT NULL,
    TELEFONO     VARCHAR(100),
    CALIFICACION VARCHAR(15),
    RUTA         INTEGER            NOT NULL
);

-- CREAR FUNCION PARA CREAR CLIENTES.
CREATE OR REPLACE FUNCTION CREAR_CLIENTE(P_CEDULA CHARACTER(100), P_NOMBRE CHARACTER(100), P_DIRECCION CHARACTER(100),
                                         P_COBRO CHARACTER(100), P_TELEFONO CHARACTER(100), P_DESPUES_DE CHARACTER(20),
                                         P_RUTA_DEL_OTRO_CLIENTE INTEGER, P_PRESTAMO_PRESTAMO DECIMAL,
                                         P_PRESTAMO_VALOR DECIMAL, P_PRESTAMO_INTERES DECIMAL, P_PRESTAMO_PLAZO INTEGER,
                                         P_FECHA_INICIO DATE,
										 P_VALOR_PAGO_DOMINGOS DECIMAL) RETURNS VOID
AS
$$
DECLARE
    CONTADOR  INTEGER = 0;
    AUX_RUTAS INTEGER = 0;
BEGIN
    IF P_DESPUES_DE = 'PRIMERO' THEN
        INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO,
                               FECHA_INICIO, CALIFICACION, TIPO_PRESTAMO)
        VALUES (P_CEDULA, P_PRESTAMO_PRESTAMO, P_PRESTAMO_VALOR, P_PRESTAMO_INTERES, P_PRESTAMO_PLAZO, P_PRESTAMO_VALOR,
                0, 'ACTIVO', P_FECHA_INICIO, 'BUENO', 'NORMAL');

        INSERT INTO CLIENTES (CEDULA, NOMBRE, DIRECCION, COBRO, TELEFONO, CALIFICACION, RUTA)
        VALUES (P_CEDULA, P_NOMBRE, P_DIRECCION, P_COBRO, P_TELEFONO, 'BUENO', 1);

    ELSIF P_DESPUES_DE = 'ANTES' THEN
        AUX_RUTAS = P_RUTA_DEL_OTRO_CLIENTE;
        CONTADOR = (SELECT MAX(RUTA) FROM CLIENTES);
        LOOP
            EXIT WHEN CONTADOR < AUX_RUTAS;
            UPDATE CLIENTES SET RUTA = (CONTADOR + 1) WHERE RUTA = CONTADOR AND COBRO = P_COBRO;
            CONTADOR = CONTADOR - 1;
        END LOOP;

        INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO,
                               FECHA_INICIO, CALIFICACION, TIPO_PRESTAMO)
        VALUES (P_CEDULA, P_PRESTAMO_PRESTAMO, P_PRESTAMO_VALOR, P_PRESTAMO_INTERES, P_PRESTAMO_PLAZO, P_PRESTAMO_VALOR,
                0, 'ACTIVO', P_FECHA_INICIO, 'BUENO', 'NORMAL');

        INSERT INTO CLIENTES (CEDULA, NOMBRE, DIRECCION, COBRO, TELEFONO, CALIFICACION, RUTA)
        VALUES (P_CEDULA, P_NOMBRE, P_DIRECCION, P_COBRO, P_TELEFONO, 'BUENO', P_RUTA_DEL_OTRO_CLIENTE);
    ELSIF P_DESPUES_DE = 'DESPUES' THEN
        AUX_RUTAS = P_RUTA_DEL_OTRO_CLIENTE;
        CONTADOR = (SELECT MAX(RUTA) FROM CLIENTES);
        LOOP
            EXIT WHEN CONTADOR < AUX_RUTAS + 1;
            UPDATE CLIENTES SET RUTA = (CONTADOR + 1) WHERE RUTA = CONTADOR AND COBRO = P_COBRO;
            CONTADOR = CONTADOR - 1;
        END LOOP;

        INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO,
                               FECHA_INICIO, CALIFICACION, TIPO_PRESTAMO)
        VALUES (P_CEDULA, P_PRESTAMO_PRESTAMO, P_PRESTAMO_VALOR, P_PRESTAMO_INTERES, P_PRESTAMO_PLAZO, P_PRESTAMO_VALOR,
                0, 'ACTIVO', P_FECHA_INICIO, 'BUENO', 'NORMAL');

        INSERT INTO CLIENTES (CEDULA, NOMBRE, DIRECCION, COBRO, TELEFONO, CALIFICACION, RUTA)
        VALUES (P_CEDULA, P_NOMBRE, P_DIRECCION, P_COBRO, P_TELEFONO, 'BUENO', P_RUTA_DEL_OTRO_CLIENTE + 1);
    END IF;

    IF (SELECT EXISTE_CONTABILIDAD(P_COBRO, P_FECHA_INICIO) = 1) THEN
        PERFORM CONTABILIDAD_SUMAR_TARJETA(P_COBRO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_PRESTO(P_COBRO, P_PRESTAMO_PRESTAMO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_UTILIDAD(P_COBRO, P_PRESTAMO_INTERES, P_FECHA_INICIO);
		PERFORM CONTABILIDAD_SUMAR_COBRO(P_COBRO, P_VALOR_PAGO_DOMINGOS, P_FECHA_INICIO);
    ELSE
        PERFORM CREAR_CONTABILIDAD(P_COBRO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_TARJETA(P_COBRO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_PRESTO(P_COBRO, P_PRESTAMO_PRESTAMO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_UTILIDAD(P_COBRO, P_PRESTAMO_INTERES, P_FECHA_INICIO);
		PERFORM CONTABILIDAD_SUMAR_COBRO(P_COBRO, P_VALOR_PAGO_DOMINGOS, P_FECHA_INICIO);
    END IF;
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION CALIFICAR CLIENTE
CREATE OR REPLACE FUNCTION CALIFICAR_PRESTAMO(P_ID_PRESTAMO INTEGER) RETURNS VOID AS
$$
DECLARE
    PLAZO_PRESTAMO_CLIENTE        INTEGER;
    FECHA_INICIO_PRESTAMO_CLIENTE DATE;
    FECHA_ULTIMO_ABONO            DATE;
    DIAS                          INTEGER;
BEGIN
    PLAZO_PRESTAMO_CLIENTE = (SELECT PLAZO_DIAS FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
    FECHA_INICIO_PRESTAMO_CLIENTE = (SELECT FECHA_INICIO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
    FECHA_ULTIMO_ABONO = (SELECT MAX(FECHA_INICIO) FROM ABONOS WHERE ID_PRESTAMO = P_ID_PRESTAMO);
    DIAS = (FECHA_ULTIMO_ABONO - FECHA_INICIO_PRESTAMO_CLIENTE);

    IF PLAZO_PRESTAMO_CLIENTE = 30 THEN
        IF DIAS <= 32 THEN -- BUENO
            UPDATE PRESTAMOS SET CALIFICACION = 'BUENO' WHERE ID = P_ID_PRESTAMO;
        ELSIF DIAS > 32 AND DIAS < 45 THEN -- REGULAR
            UPDATE PRESTAMOS SET CALIFICACION = 'REGULAR' WHERE ID = P_ID_PRESTAMO;
        ELSIF DIAS >= 45 AND DIAS < 60 THEN -- MALO
            UPDATE PRESTAMOS SET CALIFICACION = 'MALO' WHERE ID = P_ID_PRESTAMO;
        ELSIF DIAS >= 60 THEN -- CLAVO
            UPDATE PRESTAMOS SET CALIFICACION = 'CLAVO' WHERE ID = P_ID_PRESTAMO;
        END IF;
    ELSIF PLAZO_PRESTAMO_CLIENTE = 40 THEN
        IF DIAS <= 42 THEN -- BUENO
            UPDATE PRESTAMOS SET CALIFICACION = 'BUENO' WHERE ID = P_ID_PRESTAMO;
        ELSIF DIAS > 42 AND DIAS < 55 THEN -- REGULAR
            UPDATE PRESTAMOS SET CALIFICACION = 'REGULAR' WHERE ID = P_ID_PRESTAMO;
        ELSIF DIAS >= 55 AND DIAS < 70 THEN -- MALO
            UPDATE PRESTAMOS SET CALIFICACION = 'MALO' WHERE ID = P_ID_PRESTAMO;
        ELSIF DIAS >= 70 THEN -- CLAVO
            UPDATE PRESTAMOS SET CALIFICACION = 'CLAVO' WHERE ID = P_ID_PRESTAMO;
        END IF;
    END IF;
END
$$ LANGUAGE PLPGSQL;



---------------------------------------------------------------------------------
------------------------------- TABLA ABONOS.------------------------------------
---------------------------------------------------------------------------------
CREATE TABLE ABONOS
(
    ID             SERIAL PRIMARY KEY NOT NULL,
    ID_PRESTAMO    INTEGER            NOT NULL,
    FECHA_INICIO   DATE               NOT NULL,
    VALOR          NUMERIC            NOT NULL,
    VALOR_RESTANTE NUMERIC            NOT NULL,
    TIPO_ABONO VARCHAR                NOT NULL
);

-- CREAR FUNCION CARGAR ABONO
CREATE OR REPLACE FUNCTION CARGAR_ABONO(P_ID_PRESTAMO INTEGER, P_FECHA_INICIO DATE, P_VALOR NUMERIC,
                                        P_COBRO CHARACTER) RETURNS VOID
AS
$$
DECLARE
    DEBE NUMERIC = 0;
    PAGO NUMERIC = 0;
BEGIN
    DEBE = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) - P_VALOR;
    PAGO = (SELECT VALOR_PAGO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) + P_VALOR;

    UPDATE PRESTAMOS SET VALOR_DEBE = DEBE, VALOR_PAGO = PAGO WHERE ID = P_ID_PRESTAMO;

    IF DEBE = 0 THEN
        UPDATE PRESTAMOS SET ESTADO = 'PAGÃ“', FECHA_PAGO = P_FECHA_INICIO WHERE ID = P_ID_PRESTAMO;
        IF (SELECT EXISTE_CONTABILIDAD(P_COBRO, P_FECHA_INICIO) = 1) THEN
            PERFORM CONTABILIDAD_RESTAR_TARJETA(P_COBRO, P_FECHA_INICIO);
        ELSE
            PERFORM CREAR_CONTABILIDAD(P_COBRO, P_FECHA_INICIO);
            PERFORM CONTABILIDAD_RESTAR_TARJETA(P_COBRO, P_FECHA_INICIO);
        END IF;
    END IF;

    INSERT INTO ABONOS (ID_PRESTAMO, FECHA_INICIO, VALOR, VALOR_RESTANTE, TIPO_ABONO)
    VALUES (P_ID_PRESTAMO, P_FECHA_INICIO, P_VALOR, DEBE, 'ABONO');

    IF (SELECT EXISTE_CONTABILIDAD(P_COBRO, P_FECHA_INICIO) = 1) THEN
        PERFORM CONTABILIDAD_SUMAR_COBRO(P_COBRO, P_VALOR, P_FECHA_INICIO);
    ELSE
        PERFORM CREAR_CONTABILIDAD(P_COBRO, P_FECHA_INICIO);
        PERFORM CONTABILIDAD_SUMAR_COBRO(P_COBRO, P_VALOR, P_FECHA_INICIO);
    END IF;

END;
$$ LANGUAGE PLPGSQL;



---------------------------------------------------------------------------------
------------------------------- TABLA DOMINGOS.----------------------------------
---------------------------------------------------------------------------------
CREATE TABLE DOMINGOS
(
    ID                SERIAL PRIMARY KEY NOT NULL,
    ID_PRESTAMO       INTEGER            NOT NULL,
    DOMINGOS          INTEGER            NOT NULL,
    VALOR_PAGO        NUMERIC            NOT NULL,
    VALOR_POR_DOMINGO NUMERIC            NOT NULL,
    VALOR_RESTANTE    NUMERIC            NOT NULL
);

-- CREAR FUNCION OBTENER DOMINGOS PRESTAMO
CREATE OR REPLACE FUNCTION OBTENER_DOMINGOS_PRESTAMO(P_ID_PRESTAMO INTEGER) RETURNS INTEGER
AS
$DOMINGOS$
DECLARE
    DOMINGOS INTEGER = 0;
    FECHA    DATE;
    CUOTAS   INTEGER;
    INDICE   INTEGER = 0;
BEGIN
    -- OBTENEMOS LA FECHA DE INICIO DEL PRESTAMO.
    FECHA = (SELECT FECHA_INICIO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
    -- OBTENEMOS EL PLAZO EN DIAS DEL PRESTAMO.
    CUOTAS = (SELECT PLAZO_DIAS FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
    -- CALCULAR DOMINGOS
    LOOP
        EXIT WHEN INDICE = CUOTAS;
        IF (SELECT CASE
                       WHEN EXTRACT(DOW FROM FECHA) = 6 THEN -1
                       ELSE CASE WHEN EXTRACT(DOW FROM FECHA) = 0 THEN 1 ELSE 0 END END) = 1 THEN
            DOMINGOS = DOMINGOS + 1;
        END IF;
        FECHA = FECHA + CAST('1 days' AS INTERVAL);
        INDICE = INDICE + 1;
    END LOOP;

    RETURN DOMINGOS;
END
$DOMINGOS$ LANGUAGE PLPGSQL;

-- CREAR FUNCION PAGO DOMINGOS
CREATE OR REPLACE FUNCTION PAGO_DOMINGOS(P_ID_PRESTAMO INTEGER, P_DOMINGOS INTEGER, P_VALOR_PAGO NUMERIC,
                                         P_VALOR_POR_DOMINGO NUMERIC) RETURNS VOID AS
$$
DECLARE
    DEBE INTEGER = 0;
    PAGO INTEGER = 0;
BEGIN
    DEBE = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) - P_VALOR_PAGO;
    PAGO = (SELECT VALOR_PAGO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) + P_VALOR_PAGO;

    UPDATE PRESTAMOS SET VALOR_DEBE = DEBE, VALOR_PAGO = PAGO WHERE ID = P_ID_PRESTAMO;

    IF DEBE = 0 THEN
        UPDATE PRESTAMOS SET ESTADO = 'PAGÃ“' WHERE ID = P_ID_PRESTAMO;
    END IF;

    INSERT INTO DOMINGOS (ID_PRESTAMO, DOMINGOS, VALOR_PAGO, VALOR_POR_DOMINGO, VALOR_RESTANTE)
    VALUES (P_ID_PRESTAMO, P_DOMINGOS, P_VALOR_PAGO, P_VALOR_POR_DOMINGO, DEBE);

END
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION ENVIAR CLAVO
CREATE OR REPLACE FUNCTION ENVIAR_CLAVO(P_ID_PRESTAMO INTEGER, P_COBRO CHARACTER, P_FECHA_INICIO DATE) RETURNS VOID
AS
$$
DECLARE
    VALOR_DEBE_PRESTAMO NUMERIC = 0;
    PAGO NUMERIC = 0;

	NUEVO_DEBE_VALOR NUMERIC = 0;
	NUEVO_VALOR NUMERIC = 0;
	NUEVO_VALOR_PRESTAMO NUMERIC = 0;
	NUEVO_VALOR_INTERES NUMERIC = 0;
BEGIN
    VALOR_DEBE_PRESTAMO = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);

	NUEVO_DEBE_VALOR = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE ID =
						 (SELECT ID FROM PRESTAMOS WHERE CEDULA_CLIENTE =
							 (SELECT CEDULA FROM CLIENTES WHERE NOMBRE = 'CLAVO' AND COBRO = P_COBRO)
						 )
					   ) + VALOR_DEBE_PRESTAMO;

	NUEVO_VALOR = (SELECT VALOR FROM PRESTAMOS WHERE ID =
				    (SELECT ID FROM PRESTAMOS WHERE CEDULA_CLIENTE =
					  (SELECT CEDULA FROM CLIENTES WHERE NOMBRE = 'CLAVO' AND COBRO = P_COBRO)
					)
				  ) + VALOR_DEBE_PRESTAMO;

	NUEVO_VALOR_PRESTAMO = (SELECT PRESTAMO FROM PRESTAMOS WHERE ID =
				    		 (SELECT ID FROM PRESTAMOS WHERE CEDULA_CLIENTE =
					  			(SELECT CEDULA FROM CLIENTES WHERE NOMBRE = 'CLAVO' AND COBRO = P_COBRO)
							 )
				  			) + (VALOR_DEBE_PRESTAMO - (VALOR_DEBE_PRESTAMO * 0.20));

	NUEVO_VALOR_INTERES = (SELECT INTERES FROM PRESTAMOS WHERE ID =
				    		 (SELECT ID FROM PRESTAMOS WHERE CEDULA_CLIENTE =
					  			(SELECT CEDULA FROM CLIENTES WHERE NOMBRE = 'CLAVO' AND COBRO = P_COBRO)
							 )
				  			) + (VALOR_DEBE_PRESTAMO *0.20);

    PAGO = (SELECT VALOR_PAGO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);

    UPDATE PRESTAMOS
	SET VALOR_DEBE = 0,
	VALOR_PAGO = (PAGO + VALOR_DEBE_PRESTAMO),
	ESTADO = 'PAGÃ“',
	CALIFICACION = 'CLAVO'
	WHERE ID = P_ID_PRESTAMO;

    UPDATE PRESTAMOS
	SET
	VALOR_DEBE = NUEVO_DEBE_VALOR,
	VALOR = NUEVO_VALOR,
	PRESTAMO = NUEVO_VALOR_PRESTAMO,
	INTERES = NUEVO_VALOR_INTERES
	WHERE ID = (SELECT ID FROM PRESTAMOS WHERE CEDULA_CLIENTE =
				(SELECT CEDULA FROM CLIENTES WHERE NOMBRE = 'CLAVO' AND COBRO = P_COBRO)
			   );

    INSERT INTO ABONOS (ID_PRESTAMO, FECHA_INICIO, VALOR, VALOR_RESTANTE, TIPO_ABONO)
    VALUES ((SELECT ID FROM PRESTAMOS WHERE CEDULA_CLIENTE = (SELECT CEDULA FROM CLIENTES WHERE NOMBRE = 'CLAVO' AND COBRO = P_COBRO)), P_FECHA_INICIO, VALOR_DEBE_PRESTAMO, NUEVO_DEBE_VALOR, 'E.CLAVO');
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION EDITAR_RUTA_CLIENTE(P_CEDULA_CLIENTE_ACTUAL CHARACTER(100), P_COBRO CHARACTER(100), P_ACCION CHARACTER(20), P_RUTA_DEL_OTRO_CLIENTE INTEGER) RETURNS VOID
AS $$
    DECLARE
        CONTADOR  INTEGER = 0;
        AUX_RUTAS INTEGER = 0;
        RUTA_ACTUAL INTEGER = 0;
        RUTA_PROXIMA INTEGER = 0;
        V_CEDULA VARCHAR;
    BEGIN
        IF P_ACCION = 'PRIMERO' THEN
            CONTADOR = (SELECT RUTA FROM CLIENTES WHERE CEDULA = P_CEDULA_CLIENTE_ACTUAL AND COBRO = P_COBRO);
            AUX_RUTAS = CONTADOR - 1;
            LOOP EXIT WHEN CONTADOR = 0;
                IF CONTADOR = 1 THEN
                    V_CEDULA = (SELECT CEDULA FROM CLIENTES WHERE RUTA = CONTADOR AND COBRO = P_COBRO);
                    UPDATE CLIENTES SET RUTA = CONTADOR WHERE CEDULA = P_CEDULA_CLIENTE_ACTUAL AND COBRO = P_COBRO;
                    CONTADOR = CONTADOR - 1;
                ELSE
                    UPDATE CLIENTES SET RUTA = CONTADOR WHERE RUTA = AUX_RUTAS AND COBRO = P_COBRO;
                    AUX_RUTAS = AUX_RUTAS - 1;
                    CONTADOR = CONTADOR - 1;
                END IF;
            END LOOP;
        ELSE
            RUTA_ACTUAL = (SELECT RUTA FROM CLIENTES WHERE CEDULA = P_CEDULA_CLIENTE_ACTUAL AND COBRO = P_COBRO);
            RUTA_PROXIMA = P_RUTA_DEL_OTRO_CLIENTE;

            IF RUTA_ACTUAL < RUTA_PROXIMA THEN -- BAJA EN RUTA
                CONTADOR = RUTA_ACTUAL;
                LOOP EXIT WHEN RUTA_PROXIMA = CONTADOR;
                    IF CONTADOR = RUTA_PROXIMA - 1 THEN
                        UPDATE CLIENTES SET RUTA = CONTADOR WHERE RUTA = RUTA_PROXIMA AND COBRO = P_COBRO;
                        UPDATE CLIENTES SET RUTA = RUTA_PROXIMA WHERE CEDULA = P_CEDULA_CLIENTE_ACTUAL AND COBRO = P_COBRO;
                        CONTADOR = CONTADOR + 1;
                     ELSE
                        UPDATE CLIENTES SET RUTA = CONTADOR WHERE RUTA = CONTADOR + 1 AND COBRO = P_COBRO;
                        CONTADOR = CONTADOR + 1;
                    END IF;
                END LOOP;
            ELSE
                AUX_RUTAS = RUTA_ACTUAL;
                LOOP EXIT WHEN P_RUTA_DEL_OTRO_CLIENTE = AUX_RUTAS;
                    IF P_RUTA_DEL_OTRO_CLIENTE + 1 = AUX_RUTAS THEN
                        UPDATE CLIENTES SET RUTA = P_RUTA_DEL_OTRO_CLIENTE + 1 WHERE CEDULA = P_CEDULA_CLIENTE_ACTUAL AND COBRO = P_COBRO;
                        AUX_RUTAS = AUX_RUTAS - 1;
                     ELSE
                        UPDATE CLIENTES SET RUTA = AUX_RUTAS WHERE RUTA = AUX_RUTAS - 1 AND COBRO = P_COBRO;
                        AUX_RUTAS = AUX_RUTAS - 1;
                    END IF;
                END LOOP;
            END IF;
        END IF;
    END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION EXISTE_CLIENTE(P_CEDULA CHARACTER) RETURNS INTEGER
AS
$$
DECLARE
BEGIN
    IF ((SELECT 1 FROM CLIENTES WHERE CEDULA = P_CEDULA) = 1) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END;
$$ LANGUAGE PLPGSQL;


-- CREAR FUNCION ELIMINAR ABONO
CREATE OR REPLACE FUNCTION ELIMINAR_ABONO(P_ID_PRESTAMO INTEGER, P_ID_ABONO INTEGER, P_ID_CONTABILIDAD INTEGER) RETURNS VOID
AS
$$
DECLARE
    VALOR_ABONO NUMERIC = 0;
	ESTADO_PRESTAMO VARCHAR;
	NUEVO_VALOR_PAGO NUMERIC = 0;
	NUEVO_VALOR_DEBE NUMERIC = 0;
	NUEVO_VALOR_COBRO_CONTABILIDAD NUMERIC = 0;
BEGIN
    VALOR_ABONO = (SELECT VALOR FROM ABONOS WHERE ID = P_ID_ABONO);
	ESTADO_PRESTAMO = (SELECT ESTADO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
	
	IF ESTADO_PRESTAMO = 'PAGÃ“' THEN
        UPDATE PRESTAMOS SET ESTADO = 'ACTIVO' WHERE ID = P_ID_PRESTAMO;
		UPDATE CONTABILIDADES SET TARJETAS = ((SELECT TARJETAS FROM CONTABILIDADES WHERE ID = P_ID_CONTABILIDAD) + 1) WHERE ID = P_ID_CONTABILIDAD;
    END IF;
	
	NUEVO_VALOR_PAGO = (SELECT VALOR_PAGO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) - VALOR_ABONO;
	NUEVO_VALOR_DEBE = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) + VALOR_ABONO;	
	UPDATE PRESTAMOS SET VALOR_PAGO = NUEVO_VALOR_PAGO WHERE ID = P_ID_PRESTAMO;
	UPDATE PRESTAMOS SET VALOR_DEBE = NUEVO_VALOR_DEBE WHERE ID = P_ID_PRESTAMO;
	
	NUEVO_VALOR_COBRO_CONTABILIDAD = (SELECT COBRO FROM CONTABILIDADES WHERE ID = P_ID_CONTABILIDAD) - VALOR_ABONO;
	UPDATE CONTABILIDADES SET COBRO = NUEVO_VALOR_COBRO_CONTABILIDAD WHERE ID = P_ID_CONTABILIDAD;
	
	DELETE FROM ABONOS WHERE ID = P_ID_ABONO;	
END;
$$ LANGUAGE PLPGSQL;


-- CREAR FUNCION AUMENTAR RESTANTE ABONO
CREATE OR REPLACE FUNCTION AUMENTAR_RESTANTE_ABONO(P_ID_ABONO INTEGER, VALOR_A_AUMENTAR NUMERIC) RETURNS VOID
AS
$$
DECLARE
BEGIN
	UPDATE ABONOS SET VALOR_RESTANTE = ((SELECT VALOR_RESTANTE FROM ABONOS WHERE ID = P_ID_ABONO) + VALOR_A_AUMENTAR) 
	WHERE ID = P_ID_ABONO;	
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION RESTAR ABONO A CONTABILIDAD
CREATE OR REPLACE FUNCTION RESTAR_ABONO_A_CONTABILIDAD(P_ID_CONTABILIDAD INTEGER, VALOR_A_RESTAR NUMERIC) RETURNS VOID
AS
$$
DECLARE
    VALOR_ABONO NUMERIC = 0;
	ESTADO_PRESTAMO VARCHAR;
BEGIN
	UPDATE CONTABILIDADES SET COBRO = ((SELECT COBRO FROM CONTABILIDADES WHERE ID = P_ID_CONTABILIDAD) - VALOR_A_RESTAR) 
	WHERE ID = P_ID_CONTABILIDAD;	
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION RESTAR COBRO UTILIDAD Y TARJETA DE CONTABILIDAD
CREATE OR REPLACE FUNCTION RESTAR_COBRO_UTILIDAD_Y_TARJETA_DE_CONTABILIDAD(P_ID_CONTABILIDAD INTEGER,
																		   VALOR_COBRO_A_RESTAR NUMERIC,
                                                                           VALOR_UTILIDAD_A_RESTAR NUMERIC,
																		   VALOR_DOMINGOS_A_RESTAR NUMERIC) RETURNS VOID
AS
$$
DECLARE
    VALOR_ABONO NUMERIC = 0;
	ESTADO_PRESTAMO VARCHAR;
BEGIN
	UPDATE CONTABILIDADES SET 
	PRESTO = ((SELECT PRESTO FROM CONTABILIDADES WHERE ID = P_ID_CONTABILIDAD) - VALOR_COBRO_A_RESTAR),
	UTILIDAD = ((SELECT UTILIDAD FROM CONTABILIDADES WHERE ID = P_ID_CONTABILIDAD) - VALOR_UTILIDAD_A_RESTAR),
	COBRO = ((SELECT COBRO FROM CONTABILIDADES WHERE ID = P_ID_CONTABILIDAD) - VALOR_DOMINGOS_A_RESTAR),
	TARJETAS = ((SELECT TARJETAS FROM CONTABILIDADES WHERE ID = P_ID_CONTABILIDAD) - 1)
	WHERE ID = P_ID_CONTABILIDAD;	
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION ELIMINAR PRESTAMO
CREATE OR REPLACE FUNCTION ELIMINAR_PRESTAMO(P_ID_PRESTAMO INTEGER) RETURNS VOID
AS
$$
DECLARE
BEGIN
	DELETE FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO;	
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION ELIMINAR DOMINGOS
CREATE OR REPLACE FUNCTION ELIMINAR_DOMINGOS(P_ID_PRESTAMO INTEGER) RETURNS VOID
AS
$$
DECLARE
BEGIN
	DELETE FROM DOMINGOS WHERE ID_PRESTAMO = P_ID_PRESTAMO;	
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION ELIMINAR ABONOS
CREATE OR REPLACE FUNCTION ELIMINAR_ABONOS(P_ID_PRESTAMO INTEGER) RETURNS VOID
AS
$$
DECLARE
BEGIN
	DELETE FROM ABONOS WHERE ID_PRESTAMO = P_ID_PRESTAMO;	
END;
$$ LANGUAGE PLPGSQL;

-- CREAR FUNCION ELIMINAR CLIENTE
CREATE OR REPLACE FUNCTION ELIMINAR_CLIENTE(P_CEDULA VARCHAR) RETURNS VOID
AS
$$
DECLARE
BEGIN
	DELETE FROM CLIENTES WHERE CEDULA = P_CEDULA;	
END;
$$ LANGUAGE PLPGSQL;