-- PARA SANDRA.

-- GMAIL
-- USER: screditos.sandra@gmail.com
-- PASSWORD: screditos-sandra2020

-- NOMBRE DB: DB_SCREDITOS

/*
* TABLA USUARIOS.----------------------------------------------------------------
*/

-- CREAR TABLA USUARIOS.
CREATE TABLE USUARIOS
(
    ID SERIAL PRIMARY KEY NOT NULL,
    NOMBRE_COMPLETO VARCHAR(100) NOT NULL,
    USUARIO VARCHAR(20) NOT NULL,
    CONTRASENA VARCHAR(20) NOT NULL
);

-- INSERTAR USUARIO POR DEFECTO DE SANDRA.
INSERT INTO USUARIOS (NOMBRE_COMPLETO, USUARIO, CONTRASENA) VALUES ('SANDRA RESTREPO ENCISO', 'SANDRA', '0987654321');


/*
* TABLA COBROS.-----------------------------------------------------------------
*/
-- CREAR TABLA COBROS.
CREATE TABLE COBROS
(
    ID SERIAL PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR(100) NOT NULL
);

-- CREAR FUNCION PARA CREAR COBROS
CREATE OR REPLACE FUNCTION CREAR_COBROS(P_NOMBRE_COBRO CHARACTER(100), CAPITAL INTEGER) RETURNS VOID
AS $$
DECLARE
BEGIN
	INSERT INTO COBROS (NOMBRE) VALUES (P_NOMBRE_COBRO);
	
	INSERT INTO CARTERAS (ID_COBRO, TARJETAS, COBRO, PRESTO, UTILIDAD, BASE, EFECTIVO, GASTOS, CARTERA, CAJA) VALUES
	((SELECT ID FROM COBROS WHERE NOMBRE= P_NOMBRE_COBRO), 0, 0, 0, 0 , 0, 0, 0, CAPITAL, CAPITAL);	
END;
$$ LANGUAGE PLPGSQL;


/*
* TABLA CARTERAS--------------------------------------------------------------
*/

CREATE TABLE CARTERAS
(
    ID SERIAL PRIMARY KEY NOT NULL,
	ID_COBRO INT NOT NULL,
	FECHA DATE,
	TARJETAS INT NOT NULL,
	COBRO INT NOT NULL,
	PRESTO INT NOT NULL,
	UTILIDAD INT NOT NULL,
	BASE INT NOT NULL,
	EFECTIVO INT NOT NULL,
	GASTOS INT NOT NULL,
	CARTERA INT NOT NULL,
	CAJA INT NOT NULL
);





/*
* TABLA PRESTAMOS --------------------------------------------------------------
*/
-- CREAR TABLA PRESTAMOS
CREATE TABLE PRESTAMOS
(
    ID SERIAL PRIMARY KEY NOT NULL,
	CEDULA_CLIENTE VARCHAR(15) NOT NULL,
    PRESTAMO DECIMAL NOT NULL,
    VALOR DECIMAL NOT NULL,
    INTERES DECIMAL NOT NULL,
    PLAZO_DIAS INTEGER NOT NULL,
	VALOR_DEBE NUMERIC NOT NULL,
	VALOR_PAGO NUMERIC NOT NULL, 
	ESTADO VARCHAR(10) NOT NULL,
	FECHA_INICIO DATE NOT NULL,
	FECHA_PAGO DATE
);


/*
* TABLA CLIENTES. --------------------------------------------------------------
*/
-- CREAR TABLA CLIENTES
CREATE TABLE CLIENTES
(
    ID SERIAL PRIMARY KEY NOT NULL,
    CEDULA VARCHAR(15) UNIQUE NOT NULL,
    NOMBRE VARCHAR(100) NOT NULL,
    DIRECCION VARCHAR(100) NOT NULL,
	COBRO VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(15),
	CALIFICACION VARCHAR(15),
    RUTA INTEGER NOT NULL
);


-- CREAR FUNCION PARA CREAR CLIENTES.
CREATE OR REPLACE FUNCTION CREAR_CLIENTE(P_CEDULA CHARACTER(15), P_NOMBRE CHARACTER(100), P_DIRECCION CHARACTER(100), P_COBRO CHARACTER(100), P_TELEFONO CHARACTER(15), P_DESPUES_DE CHARACTER(20), P_RUTA_DEL_OTRO_CLIENTE INTEGER, P_PRESTAMO_PRESTAMO DECIMAL, P_PRESTAMO_VALOR DECIMAL, P_PRESTAMO_INTERES DECIMAL, P_PRESTAMO_PLAZO INTEGER, P_FECHA_INICIO DATE) RETURNS VOID
AS $$
DECLARE
	CONTADOR INTEGER = 0;
	AUX_RUTAS INTEGER = 0;
BEGIN
	IF P_DESPUES_DE = 'PRIMERO' THEN
		
		INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO, FECHA_INICIO) 
		VALUES (P_CEDULA, P_PRESTAMO_PRESTAMO, P_PRESTAMO_VALOR, P_PRESTAMO_INTERES, P_PRESTAMO_PLAZO, P_PRESTAMO_VALOR, 0, 'ACTIVO', P_FECHA_INICIO);

		INSERT INTO CLIENTES (CEDULA, NOMBRE, DIRECCION, COBRO, TELEFONO, CALIFICACION, RUTA) 
		VALUES (P_CEDULA, P_NOMBRE, P_DIRECCION, P_COBRO, P_TELEFONO, 'BUENO', 1);		

	ELSIF P_DESPUES_DE = 'ANTES' THEN
		AUX_RUTAS = P_RUTA_DEL_OTRO_CLIENTE;
		CONTADOR = (SELECT MAX(RUTA) FROM CLIENTES);
		LOOP EXIT WHEN CONTADOR < AUX_RUTAS;
			UPDATE CLIENTES SET RUTA = (CONTADOR + 1) WHERE RUTA = CONTADOR AND COBRO = P_COBRO;
			CONTADOR = CONTADOR - 1;
		END LOOP;
		
		INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO, FECHA_INICIO) 
		VALUES (P_CEDULA, P_PRESTAMO_PRESTAMO, P_PRESTAMO_VALOR, P_PRESTAMO_INTERES, P_PRESTAMO_PLAZO, P_PRESTAMO_VALOR, 0, 'ACTIVO', P_FECHA_INICIO);
		
		INSERT INTO CLIENTES (CEDULA, NOMBRE, DIRECCION, COBRO, TELEFONO, CALIFICACION, RUTA) 
		VALUES (P_CEDULA, P_NOMBRE, P_DIRECCION, P_COBRO, P_TELEFONO, 'BUENO', P_RUTA_DEL_OTRO_CLIENTE);		
	ELSIF P_DESPUES_DE = 'DESPUES' THEN
		AUX_RUTAS = P_RUTA_DEL_OTRO_CLIENTE;
		CONTADOR = (SELECT MAX(RUTA) FROM CLIENTES);
		LOOP EXIT WHEN CONTADOR < AUX_RUTAS + 1;
			UPDATE CLIENTES SET RUTA = (CONTADOR + 1) WHERE RUTA = CONTADOR AND COBRO = P_COBRO;
			CONTADOR = CONTADOR - 1;
		END LOOP;
		
		INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO, FECHA_INICIO) 
		VALUES (P_CEDULA, P_PRESTAMO_PRESTAMO, P_PRESTAMO_VALOR, P_PRESTAMO_INTERES, P_PRESTAMO_PLAZO, P_PRESTAMO_VALOR, 0, 'ACTIVO', P_FECHA_INICIO);

		INSERT INTO CLIENTES (CEDULA, NOMBRE, DIRECCION, COBRO, TELEFONO, CALIFICACION, RUTA) 
		VALUES (P_CEDULA, P_NOMBRE, P_DIRECCION, P_COBRO, P_TELEFONO, 'BUENO', P_RUTA_DEL_OTRO_CLIENTE+1);
	END IF;
END;
$$ LANGUAGE PLPGSQL;


/*
* TABLA ABONOS
*/
-- CREAR TABLA ABONOS
CREATE TABLE ABONOS(
	ID SERIAL PRIMARY KEY NOT NULL,
	ID_PRESTAMO INTEGER NOT NULL,
	FECHA DATE NOT NULL,
	VALOR NUMERIC NOT NULL,
	VALOR_RESTANTE NUMERIC NOT NULL	
);

-- CREAR FUNCION OBTENER DOMINGOS PRESTAMO
CREATE OR REPLACE FUNCTION OBTENER_DOMINGOS_PRESTAMO( P_ID_PRESTAMO INTEGER) RETURNS INTEGER
AS $DOMINGOS$
DECLARE
	DOMINGOS INTEGER = 0;
	FECHA DATE;
	CUOTAS INTEGER;
	INDICE INTEGER = 0;
BEGIN
	-- OBTENEMOS LA FECHA DE INICIO DEL PRESTAMO.
	FECHA = (SELECT FECHA_INICIO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
	-- OBTENEMOS EL PLAZO EN DIAS DEL PRESTAMO.
	CUOTAS = (SELECT PLAZO_DIAS FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
	-- CALCULAR DOMINGOS
	LOOP EXIT WHEN INDICE = CUOTAS;	
		IF (SELECT CASE WHEN EXTRACT(DOW FROM FECHA )=6 THEN -1 ELSE CASE WHEN EXTRACT(DOW FROM FECHA )=0 THEN 1 ELSE 0	END END) = 1 THEN 
			DOMINGOS = DOMINGOS + 1;
		END IF;	
		FECHA = FECHA + CAST('1 days' AS INTERVAL);
		INDICE = INDICE + 1;
	END LOOP;
	
	RETURN DOMINGOS;
END $DOMINGOS$ LANGUAGE PLPGSQL;

-- CREAR FUNCION CARGAR ABONO
CREATE OR REPLACE FUNCTION CARGAR_ABONO(P_ID_PRESTAMO INTEGER, P_FECHA DATE, P_VALOR NUMERIC) RETURNS VOID
AS $$
DECLARE
	DEBE NUMERIC = 0;
	PAGO NUMERIC = 0;
BEGIN
	DEBE = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE  ID = P_ID_PRESTAMO) - P_VALOR;
	PAGO = (SELECT VALOR_PAGO FROM PRESTAMOS WHERE  ID = P_ID_PRESTAMO) + P_VALOR;
	
	UPDATE PRESTAMOS SET VALOR_DEBE = DEBE, VALOR_PAGO = PAGO WHERE ID = P_ID_PRESTAMO;
	
	IF DEBE = 0 THEN
		UPDATE PRESTAMOS SET ESTADO = 'PAGÓ', FECHA_PAGO = P_FECHA WHERE ID = P_ID_PRESTAMO;
	END IF;
	
	INSERT INTO ABONOS (ID_PRESTAMO, FECHA, VALOR, VALOR_RESTANTE) VALUES (P_ID_PRESTAMO, P_FECHA, P_VALOR, DEBE);
	
END;
$$ LANGUAGE PLPGSQL;

/*
* TABLA DOMINGOS
*/
-- CREAR TABLA DOMINGOS
CREATE TABLE DOMINGOS(
	ID SERIAL PRIMARY KEY NOT NULL,
	ID_PRESTAMO INTEGER NOT NULL,
	DOMINGOS INTEGER NOT NULL,
	VALOR_PAGO NUMERIC NOT NULL,
	VALOR_POR_DOMINGO NUMERIC NOT NULL,
	VALOR_RESTANTE NUMERIC NOT NULL	
);

-- CREAR FUNCION PAGO DOMINGOS
CREATE OR REPLACE FUNCTION PAGO_DOMINGOS(P_ID_PRESTAMO INTEGER, P_DOMINGOS INTEGER, P_VALOR_PAGO NUMERIC, P_VALOR_POR_DOMINGO NUMERIC) RETURNS VOID AS $$
DECLARE
	DEBE INTEGER = 0;
	PAGO INTEGER = 0;
BEGIN
	DEBE = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) - P_VALOR_PAGO;
	PAGO = (SELECT VALOR_PAGO FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO) + P_VALOR_PAGO;
	
	UPDATE PRESTAMOS SET VALOR_DEBE = DEBE, VALOR_PAGO = PAGO WHERE ID = P_ID_PRESTAMO;
	
	IF DEBE = 0 THEN
		UPDATE PRESTAMOS SET ESTADO = 'PAGÓ' WHERE ID = P_ID_PRESTAMO;
	END IF;
	
	INSERT INTO DOMINGOS (ID_PRESTAMO, DOMINGOS, VALOR_PAGO, VALOR_POR_DOMINGO, VALOR_RESTANTE) VALUES (P_ID_PRESTAMO, P_DOMINGOS, P_VALOR_PAGO, P_VALOR_POR_DOMINGO, DEBE); 

END $$ LANGUAGE PLPGSQL;

-- CREAR FUNCION CREAR NUEVO PRESTAMO
CREATE OR REPLACE FUNCTION CREAR_NUEVO_PRESTAMO(P_CEDULA CHARACTER(15), P_PRESTAMO_PRESTAMO DECIMAL, P_PRESTAMO_VALOR DECIMAL, P_PRESTAMO_INTERES DECIMAL, P_PRESTAMO_PLAZO INTEGER, P_FECHA_INICIO DATE) RETURNS VOID AS $$
DECLARE 
BEGIN
		INSERT INTO PRESTAMOS (CEDULA_CLIENTE, PRESTAMO, VALOR, INTERES, PLAZO_DIAS, VALOR_DEBE, VALOR_PAGO, ESTADO, FECHA_INICIO) 
		VALUES (P_CEDULA, P_PRESTAMO_PRESTAMO, P_PRESTAMO_VALOR, P_PRESTAMO_INTERES, P_PRESTAMO_PLAZO, P_PRESTAMO_VALOR, 0, 'ACTIVO', P_FECHA_INICIO);
END $$ LANGUAGE PLPGSQL;


-- CREAR FUNCION CALIFICAR CLIENTE
CREATE OR REPLACE FUNCTION CALIFICAR_CLIENTE(P_CEDULA CHARACTER(15)) RETURNS VOID AS $$
DECLARE
	ID_PRESTAMO_CLIENTE INTEGER;
	PLAZO_PRESTAMO_CLIENTE INTEGER;
	FECHA_INICIO_PRESTAMO_CLIENTE DATE;
	FECHA_ULTIMO_ABONO DATE;
	DIAS INTEGER;
BEGIN
	ID_PRESTAMO_CLIENTE = (SELECT MAX(ID) FROM PRESTAMOS WHERE CEDULA_CLIENTE = P_CEDULA);
	PLAZO_PRESTAMO_CLIENTE = (SELECT PLAZO_DIAS FROM PRESTAMOS WHERE ID = ID_PRESTAMO_CLIENTE);
	FECHA_INICIO_PRESTAMO_CLIENTE = (SELECT FECHA_INICIO FROM PRESTAMOS WHERE ID = ID_PRESTAMO_CLIENTE);
	FECHA_ULTIMO_ABONO = (SELECT MAX(FECHA) FROM ABONOS WHERE ID_PRESTAMO = ID_PRESTAMO_CLIENTE);
	DIAS = (FECHA_ULTIMO_ABONO - FECHA_INICIO_PRESTAMO_CLIENTE);
	
	IF PLAZO_PRESTAMO_CLIENTE = 30 THEN
		IF DIAS <= 32 THEN -- BUENO
			UPDATE CLIENTES SET CALIFICACION = 'BUENO' WHERE CEDULA = P_CEDULA;
		ELSIF DIAS > 32 AND DIAS < 45 THEN -- REGULAR
			UPDATE CLIENTES SET CALIFICACION = 'REGULAR' WHERE CEDULA = P_CEDULA;
		ELSIF DIAS >= 45 AND DIAS < 60 THEN -- MALO
			UPDATE CLIENTES SET CALIFICACION = 'MALO' WHERE CEDULA = P_CEDULA;
		ELSIF DIAS >= 60 THEN -- CLAVO
			UPDATE CLIENTES SET CALIFICACION = 'CLAVO' WHERE CEDULA = P_CEDULA;
		END IF;
	ELSIF PLAZO_PRESTAMO_CLIENTE = 40 THEN
		IF DIAS <= 42 THEN -- BUENO
			UPDATE CLIENTES SET CALIFICACION = 'BUENO' WHERE CEDULA = P_CEDULA;
		ELSIF DIAS > 42 AND DIAS < 55 THEN -- REGULAR
			UPDATE CLIENTES SET CALIFICACION = 'REGULAR' WHERE CEDULA = P_CEDULA;
		ELSIF DIAS >= 55 AND DIAS < 70 THEN -- MALO
			UPDATE CLIENTES SET CALIFICACION = 'MALO' WHERE CEDULA = P_CEDULA;
		ELSIF DIAS >= 70 THEN -- CLAVO
			UPDATE CLIENTES SET CALIFICACION = 'CLAVO' WHERE CEDULA = P_CEDULA;
		END IF;
	END IF;	
END $$ LANGUAGE PLPGSQL;


-- CREAR FUNCION CANCELAR PRESTAMO
CREATE OR REPLACE FUNCTION CANCELAR_PRESTAMO(P_ID_PRESTAMO INTEGER, P_FECHA DATE) RETURNS VOID AS $$
DECLARE
	DEBE NUMERIC;
	PAGO NUMERIC;
BEGIN
	DEBE = (SELECT VALOR_DEBE FROM PRESTAMOS WHERE ID = P_ID_PRESTAMO);
	PAGO = (SELECT VALOR_PAGO FROM PRESTAMOS WHERE  ID = P_ID_PRESTAMO) + DEBE;
	
	UPDATE PRESTAMOS SET VALOR_DEBE = 0, VALOR_PAGO = PAGO, ESTADO = 'PAGÓ', FECHA_PAGO = P_FECHA WHERE ID = P_ID_PRESTAMO;	

	INSERT INTO ABONOS (ID_PRESTAMO, FECHA, VALOR, VALOR_RESTANTE) VALUES (P_ID_PRESTAMO, P_FECHA, DEBE, 0);

END $$ LANGUAGE PLPGSQL;